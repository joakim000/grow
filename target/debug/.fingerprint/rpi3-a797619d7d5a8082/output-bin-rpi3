{"message":"unused import: `Hub`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/rpi3/src/hardware/lpu.rs","byte_start":1030,"byte_end":1033,"line_start":34,"line_end":34,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"use lego_powered_up::{Hub, HubFilter};","highlight_start":23,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Hub`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/rpi3/src/hardware/lpu.rs:34:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse lego_powered_up::{Hub, HubFilter};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `grow::zone::air::Fan`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/rpi3/src/hardware/pwmfan.rs","byte_start":516,"byte_end":536,"line_start":24,"line_end":24,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"use grow::zone::air::Fan;","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `grow::zone::air::Fan`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/rpi3/src/hardware/pwmfan.rs:24:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse grow::zone::air::Fan;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `Hub`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/rpi3/src/hardware/lpu_remote.rs","byte_start":290,"byte_end":293,"line_start":14,"line_end":14,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"use lego_powered_up::{Hub, HubFilter};","highlight_start":23,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Hub`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/rpi3/src/hardware/lpu_remote.rs:14:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse lego_powered_up::{Hub, HubFilter};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"value captured by `fan_rpm` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"examples/rpi3/src/hardware/pwmfan.rs","byte_start":4722,"byte_end":4729,"line_start":141,"line_end":141,"column_start":21,"column_end":28,"is_primary":true,"text":[{"text":"                    fan_rpm = Some(","highlight_start":21,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"did you mean to capture by reference instead?","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_assignments)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value captured by `fan_rpm` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/rpi3/src/hardware/pwmfan.rs:141:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    fan_rpm = Some(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: did you mean to capture by reference instead?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_assignments)]` on by default\u001b[0m\n\n"}
{"message":"value captured by `led_byte` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"examples/rpi3/src/hardware/regshift_leds.rs","byte_start":6262,"byte_end":6270,"line_start":180,"line_end":180,"column_start":17,"column_end":25,"is_primary":true,"text":[{"text":"                led_byte = 0b11111111;","highlight_start":17,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"did you mean to capture by reference instead?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value captured by `led_byte` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/rpi3/src/hardware/regshift_leds.rs:180:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m180\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                led_byte = 0b11111111;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: did you mean to capture by reference instead?\u001b[0m\n\n"}
{"message":"variants `Light`, `Arm`, and `Pump` are never constructed","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/rpi3/src/cmd.rs","byte_start":327,"byte_end":334,"line_start":18,"line_end":18,"column_start":10,"column_end":17,"is_primary":false,"text":[{"text":"pub enum ZoneCmd {","highlight_start":10,"highlight_end":17}],"label":"variants in this enum","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/rpi3/src/cmd.rs","byte_start":459,"byte_end":464,"line_start":21,"line_end":21,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    Light {","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/rpi3/src/cmd.rs","byte_start":604,"byte_end":607,"line_start":26,"line_end":26,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    Arm {","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/rpi3/src/cmd.rs","byte_start":680,"byte_end":684,"line_start":30,"line_end":30,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    Pump {","highlight_start":5,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`ZoneCmd` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variants `Light`, `Arm`, and `Pump` are never constructed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/rpi3/src/cmd.rs:21:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum ZoneCmd {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvariants in this enum\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Light {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Arm {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Pump {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `ZoneCmd` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"message":"field `feedback_task` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/rpi3/src/hardware/lpu_remote.rs","byte_start":590,"byte_end":599,"line_start":46,"line_end":46,"column_start":12,"column_end":21,"is_primary":false,"text":[{"text":"pub struct LpuRemote {","highlight_start":12,"highlight_end":21}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/rpi3/src/hardware/lpu_remote.rs","byte_start":673,"byte_end":686,"line_start":49,"line_end":49,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"    feedback_task: Option<JoinHandle<()>>,","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `feedback_task` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/rpi3/src/hardware/lpu_remote.rs:49:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct LpuRemote {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    feedback_task: Option<JoinHandle<()>>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"field `fan_setting` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/rpi3/src/hardware/pwmfan.rs","byte_start":550,"byte_end":556,"line_start":26,"line_end":26,"column_start":12,"column_end":18,"is_primary":false,"text":[{"text":"pub struct PwmFan {","highlight_start":12,"highlight_end":18}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/rpi3/src/hardware/pwmfan.rs","byte_start":650,"byte_end":661,"line_start":31,"line_end":31,"column_start":5,"column_end":16,"is_primary":true,"text":[{"text":"    fan_setting: FanSetting,","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `fan_setting` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/rpi3/src/hardware/pwmfan.rs:31:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PwmFan {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fan_setting: FanSetting,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"field `feedback_task` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/rpi3/src/hardware/pushbuttons.rs","byte_start":138,"byte_end":149,"line_start":9,"line_end":9,"column_start":12,"column_end":23,"is_primary":false,"text":[{"text":"pub struct PushButtons {","highlight_start":12,"highlight_end":23}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/rpi3/src/hardware/pushbuttons.rs","byte_start":193,"byte_end":206,"line_start":12,"line_end":12,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"    feedback_task: Option<JoinHandle<()>>,","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `feedback_task` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/rpi3/src/hardware/pushbuttons.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PushButtons {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    feedback_task: Option<JoinHandle<()>>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused `Result` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"examples/rpi3/src/main.rs","byte_start":1590,"byte_end":1664,"line_start":59,"line_end":59,"column_start":5,"column_end":79,"is_primary":true,"text":[{"text":"    btn_1.set_async_interrupt(Trigger::Both, |l| println!(\"Btn 111: {:?}\", l));","highlight_start":5,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_must_use)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `let _ = ...` to ignore the resulting value","code":null,"level":"help","spans":[{"file_name":"examples/rpi3/src/main.rs","byte_start":1590,"byte_end":1590,"line_start":59,"line_end":59,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    btn_1.set_async_interrupt(Trigger::Both, |l| println!(\"Btn 111: {:?}\", l));","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"let _ = ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` that must be used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/rpi3/src/main.rs:59:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    btn_1.set_async_interrupt(Trigger::Both, |l| println!(\"Btn 111: {:?}\", l));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_must_use)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `let _ = ...` to ignore the resulting value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10mlet _ = \u001b[0m\u001b[0mbtn_1.set_async_interrupt(Trigger::Both, |l| println!(\"Btn 111: {:?}\", l));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}
{"message":"unused `Result` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"examples/rpi3/src/main.rs","byte_start":1670,"byte_end":1746,"line_start":60,"line_end":60,"column_start":5,"column_end":81,"is_primary":true,"text":[{"text":"    btn_2.set_async_interrupt(Trigger::Both, |l| println!(\"Btn 2 2 2: {:?}\", l));","highlight_start":5,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `let _ = ...` to ignore the resulting value","code":null,"level":"help","spans":[{"file_name":"examples/rpi3/src/main.rs","byte_start":1670,"byte_end":1670,"line_start":60,"line_end":60,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    btn_2.set_async_interrupt(Trigger::Both, |l| println!(\"Btn 2 2 2: {:?}\", l));","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"let _ = ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` that must be used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/rpi3/src/main.rs:60:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    btn_2.set_async_interrupt(Trigger::Both, |l| println!(\"Btn 2 2 2: {:?}\", l));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `let _ = ...` to ignore the resulting value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10mlet _ = \u001b[0m\u001b[0mbtn_2.set_async_interrupt(Trigger::Both, |l| println!(\"Btn 2 2 2: {:?}\", l));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}
{"message":"unused `Result` in tuple element 0 that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"/home/joakim/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.29.1/src/macros/join.rs","byte_start":2103,"byte_end":5307,"line_start":69,"line_end":151,"column_start":12,"column_end":6,"is_primary":true,"text":[{"text":"    }) => {{","highlight_start":12,"highlight_end":13},{"text":"        use $crate::macros::support::{maybe_done, poll_fn, Future, Pin};","highlight_start":1,"highlight_end":73},{"text":"        use $crate::macros::support::Poll::{Ready, Pending};","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Safety: nothing must be moved out of `futures`. This is to satisfy","highlight_start":1,"highlight_end":78},{"text":"        // the requirement of `Pin::new_unchecked` called below.","highlight_start":1,"highlight_end":65},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // We can't use the `pin!` macro for this because `futures` is a tuple","highlight_start":1,"highlight_end":79},{"text":"        // and the standard library provides no way to pin-project to the fields","highlight_start":1,"highlight_end":81},{"text":"        // of a tuple.","highlight_start":1,"highlight_end":23},{"text":"        let mut futures = ( $( maybe_done($e), )* );","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // This assignment makes sure that the `poll_fn` closure only has a","highlight_start":1,"highlight_end":76},{"text":"        // reference to the futures, instead of taking ownership of them. This","highlight_start":1,"highlight_end":79},{"text":"        // mitigates the issue described in","highlight_start":1,"highlight_end":44},{"text":"        // <https://internals.rust-lang.org/t/surprising-soundness-trouble-around-pollfn/17484>","highlight_start":1,"highlight_end":96},{"text":"        let mut futures = &mut futures;","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Each time the future created by poll_fn is polled, a different future will be polled first","highlight_start":1,"highlight_end":102},{"text":"        // to ensure every future passed to join! gets a chance to make progress even if","highlight_start":1,"highlight_end":89},{"text":"        // one of the futures consumes the whole budget.","highlight_start":1,"highlight_end":57},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // This is number of futures that will be skipped in the first loop","highlight_start":1,"highlight_end":76},{"text":"        // iteration the next time.","highlight_start":1,"highlight_end":36},{"text":"        let mut skip_next_time: u32 = 0;","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        poll_fn(move |cx| {","highlight_start":1,"highlight_end":28},{"text":"            const COUNT: u32 = $($total)*;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut is_pending = false;","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut to_run = COUNT;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // The number of futures that will be skipped in the first loop iteration.","highlight_start":1,"highlight_end":87},{"text":"            let mut skip = skip_next_time;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            skip_next_time = if skip + 1 == COUNT { 0 } else { skip + 1 };","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // This loop runs twice and the first `skip` futures","highlight_start":1,"highlight_end":65},{"text":"            // are not polled in the first iteration.","highlight_start":1,"highlight_end":54},{"text":"            loop {","highlight_start":1,"highlight_end":19},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if skip == 0 {","highlight_start":1,"highlight_end":31},{"text":"                    if to_run == 0 {","highlight_start":1,"highlight_end":37},{"text":"                        // Every future has been polled","highlight_start":1,"highlight_end":56},{"text":"                        break;","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    to_run -= 1;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Extract the future for this branch from the tuple.","highlight_start":1,"highlight_end":74},{"text":"                    let ( $($skip,)* fut, .. ) = &mut *futures;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Safety: future is stored on the stack above","highlight_start":1,"highlight_end":67},{"text":"                    // and never moved.","highlight_start":1,"highlight_end":40},{"text":"                    let mut fut = unsafe { Pin::new_unchecked(fut) };","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Try polling","highlight_start":1,"highlight_end":35},{"text":"                    if fut.poll(cx).is_pending() {","highlight_start":1,"highlight_end":51},{"text":"                        is_pending = true;","highlight_start":1,"highlight_end":43},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    // Future skipped, one less future to skip in the next iteration","highlight_start":1,"highlight_end":85},{"text":"                    skip -= 1;","highlight_start":1,"highlight_end":31},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if is_pending {","highlight_start":1,"highlight_end":28},{"text":"                Pending","highlight_start":1,"highlight_end":24},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                Ready(($({","highlight_start":1,"highlight_end":27},{"text":"                    // Extract the future for this branch from the tuple.","highlight_start":1,"highlight_end":74},{"text":"                    let ( $($skip,)* fut, .. ) = &mut futures;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Safety: future is stored on the stack above","highlight_start":1,"highlight_end":67},{"text":"                    // and never moved.","highlight_start":1,"highlight_end":40},{"text":"                    let mut fut = unsafe { Pin::new_unchecked(fut) };","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    fut.take_output().expect(\"expected completed future\")","highlight_start":1,"highlight_end":74},{"text":"                },)*))","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }).await","highlight_start":1,"highlight_end":17},{"text":"    }};","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/joakim/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.29.1/src/macros/join.rs","byte_start":5424,"byte_end":5494,"line_start":156,"line_end":156,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        $crate::join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/joakim/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.29.1/src/macros/join.rs","byte_start":5424,"byte_end":5494,"line_start":156,"line_end":156,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        $crate::join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/joakim/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.29.1/src/macros/join.rs","byte_start":5574,"byte_end":5608,"line_start":162,"line_end":162,"column_start":9,"column_end":43,"is_primary":false,"text":[{"text":"        $crate::join!(@{ () (0) } $($e,)*)","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"examples/rpi3/src/hardware/lpu.rs","byte_start":15393,"byte_end":15445,"line_start":446,"line_end":446,"column_start":9,"column_end":61,"is_primary":false,"text":[{"text":"        tokio::join!(calibration_task_x, calibration_task_y);","highlight_start":9,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tokio::join!","def_site_span":{"file_name":"/home/joakim/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.29.1/src/macros/join.rs","byte_start":1739,"byte_end":1756,"line_start":57,"line_end":57,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! join {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/home/joakim/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.29.1/src/macros/join.rs","byte_start":1739,"byte_end":1756,"line_start":57,"line_end":57,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! join {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/home/joakim/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.29.1/src/macros/join.rs","byte_start":1739,"byte_end":1756,"line_start":57,"line_end":57,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! join {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/home/joakim/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.29.1/src/macros/join.rs","byte_start":1739,"byte_end":1756,"line_start":57,"line_end":57,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! join {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` in tuple element 0 that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/rpi3/src/hardware/lpu.rs:446:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m446\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        tokio::join!(calibration_task_x, calibration_task_y);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::join` which comes from the expansion of the macro `tokio::join` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unused `Result` in tuple element 1 that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"/home/joakim/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.29.1/src/macros/join.rs","byte_start":2103,"byte_end":5307,"line_start":69,"line_end":151,"column_start":12,"column_end":6,"is_primary":true,"text":[{"text":"    }) => {{","highlight_start":12,"highlight_end":13},{"text":"        use $crate::macros::support::{maybe_done, poll_fn, Future, Pin};","highlight_start":1,"highlight_end":73},{"text":"        use $crate::macros::support::Poll::{Ready, Pending};","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Safety: nothing must be moved out of `futures`. This is to satisfy","highlight_start":1,"highlight_end":78},{"text":"        // the requirement of `Pin::new_unchecked` called below.","highlight_start":1,"highlight_end":65},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // We can't use the `pin!` macro for this because `futures` is a tuple","highlight_start":1,"highlight_end":79},{"text":"        // and the standard library provides no way to pin-project to the fields","highlight_start":1,"highlight_end":81},{"text":"        // of a tuple.","highlight_start":1,"highlight_end":23},{"text":"        let mut futures = ( $( maybe_done($e), )* );","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // This assignment makes sure that the `poll_fn` closure only has a","highlight_start":1,"highlight_end":76},{"text":"        // reference to the futures, instead of taking ownership of them. This","highlight_start":1,"highlight_end":79},{"text":"        // mitigates the issue described in","highlight_start":1,"highlight_end":44},{"text":"        // <https://internals.rust-lang.org/t/surprising-soundness-trouble-around-pollfn/17484>","highlight_start":1,"highlight_end":96},{"text":"        let mut futures = &mut futures;","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Each time the future created by poll_fn is polled, a different future will be polled first","highlight_start":1,"highlight_end":102},{"text":"        // to ensure every future passed to join! gets a chance to make progress even if","highlight_start":1,"highlight_end":89},{"text":"        // one of the futures consumes the whole budget.","highlight_start":1,"highlight_end":57},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // This is number of futures that will be skipped in the first loop","highlight_start":1,"highlight_end":76},{"text":"        // iteration the next time.","highlight_start":1,"highlight_end":36},{"text":"        let mut skip_next_time: u32 = 0;","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        poll_fn(move |cx| {","highlight_start":1,"highlight_end":28},{"text":"            const COUNT: u32 = $($total)*;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut is_pending = false;","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut to_run = COUNT;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // The number of futures that will be skipped in the first loop iteration.","highlight_start":1,"highlight_end":87},{"text":"            let mut skip = skip_next_time;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            skip_next_time = if skip + 1 == COUNT { 0 } else { skip + 1 };","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // This loop runs twice and the first `skip` futures","highlight_start":1,"highlight_end":65},{"text":"            // are not polled in the first iteration.","highlight_start":1,"highlight_end":54},{"text":"            loop {","highlight_start":1,"highlight_end":19},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if skip == 0 {","highlight_start":1,"highlight_end":31},{"text":"                    if to_run == 0 {","highlight_start":1,"highlight_end":37},{"text":"                        // Every future has been polled","highlight_start":1,"highlight_end":56},{"text":"                        break;","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    to_run -= 1;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Extract the future for this branch from the tuple.","highlight_start":1,"highlight_end":74},{"text":"                    let ( $($skip,)* fut, .. ) = &mut *futures;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Safety: future is stored on the stack above","highlight_start":1,"highlight_end":67},{"text":"                    // and never moved.","highlight_start":1,"highlight_end":40},{"text":"                    let mut fut = unsafe { Pin::new_unchecked(fut) };","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Try polling","highlight_start":1,"highlight_end":35},{"text":"                    if fut.poll(cx).is_pending() {","highlight_start":1,"highlight_end":51},{"text":"                        is_pending = true;","highlight_start":1,"highlight_end":43},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    // Future skipped, one less future to skip in the next iteration","highlight_start":1,"highlight_end":85},{"text":"                    skip -= 1;","highlight_start":1,"highlight_end":31},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if is_pending {","highlight_start":1,"highlight_end":28},{"text":"                Pending","highlight_start":1,"highlight_end":24},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                Ready(($({","highlight_start":1,"highlight_end":27},{"text":"                    // Extract the future for this branch from the tuple.","highlight_start":1,"highlight_end":74},{"text":"                    let ( $($skip,)* fut, .. ) = &mut futures;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // Safety: future is stored on the stack above","highlight_start":1,"highlight_end":67},{"text":"                    // and never moved.","highlight_start":1,"highlight_end":40},{"text":"                    let mut fut = unsafe { Pin::new_unchecked(fut) };","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    fut.take_output().expect(\"expected completed future\")","highlight_start":1,"highlight_end":74},{"text":"                },)*))","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }).await","highlight_start":1,"highlight_end":17},{"text":"    }};","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/joakim/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.29.1/src/macros/join.rs","byte_start":5424,"byte_end":5494,"line_start":156,"line_end":156,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        $crate::join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/joakim/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.29.1/src/macros/join.rs","byte_start":5424,"byte_end":5494,"line_start":156,"line_end":156,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        $crate::join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/joakim/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.29.1/src/macros/join.rs","byte_start":5574,"byte_end":5608,"line_start":162,"line_end":162,"column_start":9,"column_end":43,"is_primary":false,"text":[{"text":"        $crate::join!(@{ () (0) } $($e,)*)","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"examples/rpi3/src/hardware/lpu.rs","byte_start":15393,"byte_end":15445,"line_start":446,"line_end":446,"column_start":9,"column_end":61,"is_primary":false,"text":[{"text":"        tokio::join!(calibration_task_x, calibration_task_y);","highlight_start":9,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tokio::join!","def_site_span":{"file_name":"/home/joakim/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.29.1/src/macros/join.rs","byte_start":1739,"byte_end":1756,"line_start":57,"line_end":57,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! join {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/home/joakim/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.29.1/src/macros/join.rs","byte_start":1739,"byte_end":1756,"line_start":57,"line_end":57,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! join {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/home/joakim/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.29.1/src/macros/join.rs","byte_start":1739,"byte_end":1756,"line_start":57,"line_end":57,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! join {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::join!","def_site_span":{"file_name":"/home/joakim/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.29.1/src/macros/join.rs","byte_start":1739,"byte_end":1756,"line_start":57,"line_end":57,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! join {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` in tuple element 1 that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/rpi3/src/hardware/lpu.rs:446:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m446\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        tokio::join!(calibration_task_x, calibration_task_y);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `$crate::join` which comes from the expansion of the macro `tokio::join` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"13 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 13 warnings emitted\u001b[0m\n\n"}
